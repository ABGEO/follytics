/* tslint:disable */
/* eslint-disable */
/**
 * Follytics API
 * Follytics API service
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: support@follytics.localhost
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetUserFollowEvents200Response } from '../model';
// @ts-ignore
import type { GetUserFollowers200Response } from '../model';
// @ts-ignore
import type { ResponseHTTPError } from '../model';
// @ts-ignore
import type { ResponseHTTPResponseResponseFollowersTimeline } from '../model';
// @ts-ignore
import type { ResponseHTTPResponseResponseUser } from '../model';
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns details of the currently authenticated account
         * @summary Retrieve the current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of follow/unfollow events for the specified user ID
         * @summary Retrieve follow events for a user
         * @param {string} id User ID to retrieve followers for
         * @param {number} [page] Page number for pagination (default: 1)
         * @param {number} [limit] Number of results per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowEvents: async (id: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserFollowEvents', 'id', id)
            const localVarPath = `/users/{id}/follow-events`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a paginated list of followers for the specified user ID
         * @summary Retrieve followers for a user
         * @param {string} id User ID to retrieve followers for
         * @param {number} [page] Page number for pagination (default: 1)
         * @param {number} [limit] Number of results per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowers: async (id: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserFollowers', 'id', id)
            const localVarPath = `/users/{id}/followers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a timeline of user followers for the specified user ID
         * @summary Retrieve followers timeline for a user
         * @param {string} id User ID to retrieve timeline for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowersTimeline: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserFollowersTimeline', 'id', id)
            const localVarPath = `/users/{id}/followers/timeline`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user if they do not exist or updates an existing user upon login
         * @summary Track user login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackLogin: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/login-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns details of the currently authenticated account
         * @summary Retrieve the current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseHTTPResponseResponseUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getCurrentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a paginated list of follow/unfollow events for the specified user ID
         * @summary Retrieve follow events for a user
         * @param {string} id User ID to retrieve followers for
         * @param {number} [page] Page number for pagination (default: 1)
         * @param {number} [limit] Number of results per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowEvents(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserFollowEvents200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFollowEvents(id, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserFollowEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a paginated list of followers for the specified user ID
         * @summary Retrieve followers for a user
         * @param {string} id User ID to retrieve followers for
         * @param {number} [page] Page number for pagination (default: 1)
         * @param {number} [limit] Number of results per page (default: 10)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowers(id: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetUserFollowers200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFollowers(id, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserFollowers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a timeline of user followers for the specified user ID
         * @summary Retrieve followers timeline for a user
         * @param {string} id User ID to retrieve timeline for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserFollowersTimeline(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseHTTPResponseResponseFollowersTimeline>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserFollowersTimeline(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserFollowersTimeline']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Creates a new user if they do not exist or updates an existing user upon login
         * @summary Track user login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async trackLogin(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseHTTPResponseResponseUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.trackLogin(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.trackLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Returns details of the currently authenticated account
         * @summary Retrieve the current authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RawAxiosRequestConfig): AxiosPromise<ResponseHTTPResponseResponseUser> {
            return localVarFp.getCurrentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of follow/unfollow events for the specified user ID
         * @summary Retrieve follow events for a user
         * @param {UserApiGetUserFollowEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowEvents(requestParameters: UserApiGetUserFollowEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUserFollowEvents200Response> {
            return localVarFp.getUserFollowEvents(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a paginated list of followers for the specified user ID
         * @summary Retrieve followers for a user
         * @param {UserApiGetUserFollowersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowers(requestParameters: UserApiGetUserFollowersRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetUserFollowers200Response> {
            return localVarFp.getUserFollowers(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a timeline of user followers for the specified user ID
         * @summary Retrieve followers timeline for a user
         * @param {UserApiGetUserFollowersTimelineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserFollowersTimeline(requestParameters: UserApiGetUserFollowersTimelineRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseHTTPResponseResponseFollowersTimeline> {
            return localVarFp.getUserFollowersTimeline(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new user if they do not exist or updates an existing user upon login
         * @summary Track user login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackLogin(options?: RawAxiosRequestConfig): AxiosPromise<ResponseHTTPResponseResponseUser> {
            return localVarFp.trackLogin(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserFollowEvents operation in UserApi.
 * @export
 * @interface UserApiGetUserFollowEventsRequest
 */
export interface UserApiGetUserFollowEventsRequest {
    /**
     * User ID to retrieve followers for
     * @type {string}
     * @memberof UserApiGetUserFollowEvents
     */
    readonly id: string

    /**
     * Page number for pagination (default: 1)
     * @type {number}
     * @memberof UserApiGetUserFollowEvents
     */
    readonly page?: number

    /**
     * Number of results per page (default: 10)
     * @type {number}
     * @memberof UserApiGetUserFollowEvents
     */
    readonly limit?: number
}

/**
 * Request parameters for getUserFollowers operation in UserApi.
 * @export
 * @interface UserApiGetUserFollowersRequest
 */
export interface UserApiGetUserFollowersRequest {
    /**
     * User ID to retrieve followers for
     * @type {string}
     * @memberof UserApiGetUserFollowers
     */
    readonly id: string

    /**
     * Page number for pagination (default: 1)
     * @type {number}
     * @memberof UserApiGetUserFollowers
     */
    readonly page?: number

    /**
     * Number of results per page (default: 10)
     * @type {number}
     * @memberof UserApiGetUserFollowers
     */
    readonly limit?: number
}

/**
 * Request parameters for getUserFollowersTimeline operation in UserApi.
 * @export
 * @interface UserApiGetUserFollowersTimelineRequest
 */
export interface UserApiGetUserFollowersTimelineRequest {
    /**
     * User ID to retrieve timeline for
     * @type {string}
     * @memberof UserApiGetUserFollowersTimeline
     */
    readonly id: string
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Returns details of the currently authenticated account
     * @summary Retrieve the current authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUser(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of follow/unfollow events for the specified user ID
     * @summary Retrieve follow events for a user
     * @param {UserApiGetUserFollowEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserFollowEvents(requestParameters: UserApiGetUserFollowEventsRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserFollowEvents(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a paginated list of followers for the specified user ID
     * @summary Retrieve followers for a user
     * @param {UserApiGetUserFollowersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserFollowers(requestParameters: UserApiGetUserFollowersRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserFollowers(requestParameters.id, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a timeline of user followers for the specified user ID
     * @summary Retrieve followers timeline for a user
     * @param {UserApiGetUserFollowersTimelineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserFollowersTimeline(requestParameters: UserApiGetUserFollowersTimelineRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserFollowersTimeline(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new user if they do not exist or updates an existing user upon login
     * @summary Track user login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public trackLogin(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).trackLogin(options).then((request) => request(this.axios, this.basePath));
    }
}

