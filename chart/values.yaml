postgresql:
  enabled: true

  architecture: replication
  replication:
    applicationName: follytics

  primary:
    resourcesPreset: "nano"

  persistence:
    enabled: true
    size: 8Gi

  readReplicas:
    replicaCount: 3
    resourcesPreset: "nano"

    persistence:
      enabled: true
      size: 8Gi

  volumePermissions:
    enabled: true

opentelemetry-collector:
  enabled: true

  mode: deployment

  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.128.0"

  config:
    exporters:
      otlp:
        endpoint: "{{ .Release.Name }}-tempo:4317"
        tls:
          insecure: true
      prometheus:
        endpoint: 0.0.0.0:9090
      loki:
        endpoint: "http://{{ .Release.Name }}-loki:3100/loki/api/v1/push"
        tls:
          insecure: true

    service:
      pipelines:
        logs:
          exporters:
            - loki
          receivers:
            - otlp
        metrics:
          exporters:
            - prometheus
          receivers:
            - otlp
        traces:
          exporters:
            - otlp
          receivers:
            - otlp

  ports:
    jaeger-compact:
      enabled: false
    jaeger-thrift:
      enabled: false
    jaeger-grpc:
      enabled: false
    zipkin:
      enabled: false
    metrics:
      enabled: true
      containerPort: 9090
      servicePort: 9090
      protocol: TCP

tempo:
  enabled: true

  tempo:
    reportingEnabled: false
    retention: 168h # 7 Days

  persistence:
    enabled: true
    size: 1Gi

loki:
  enabled: true

  test:
    enabled: false

  loki:
    auth_enabled: false

    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: 2024-04-01
          store: tsdb
          object_store: filesystem
          schema: v13
          index:
            prefix: loki_index_
            period: 24h

    ingester:
      chunk_encoding: snappy
    tracing:
      enabled: true
    querier:
      max_concurrent: 2
    storage:
      type: filesystem

  deploymentMode: SingleBinary
  singleBinary:
    replicas: 1
    persistence:
      size: 1Gi

  #  chunksCache:
  #    writebackSizeLimit: 10MB

  chunksCache:
    enabled: false
  resultsCache:
    enabled: false
  gateway:
    enabled: false
  lokiCanary:
    enabled: false

  backend:
    replicas: 0
  read:
    replicas: 0
  write:
    replicas: 0

  ingester:
    replicas: 0
  querier:
    replicas: 0
  queryFrontend:
    replicas: 0
  queryScheduler:
    replicas: 0
  distributor:
    replicas: 0
  compactor:
    replicas: 0
  indexGateway:
    replicas: 0
  bloomCompactor:
    replicas: 0
  bloomGateway:
    replicas: 0

prometheus:
  enabled: true

  server:
    persistentVolume:
      size: 1Gi

  serverFiles:
    prometheus.yml:
      scrape_configs:
        - job_name: otel-collector
          scrape_interval: 5s
          static_configs:
            - targets:
                - "follytics-opentelemetry-collector.follytics.svc.cluster.local:9090"

  alertmanager:
    enabled: false
  kube-state-metrics:
    enabled: false
  prometheus-node-exporter:
    enabled: false
  prometheus-pushgateway:
    enabled: false

grafana:
  enabled: true

  env:
    PROMETHEUS_URL: "http://{{ .Release.Name }}-prometheus-server.{{ .Release.Namespace }}.svc.cluster.local:80"
    LOKI_URL: "http://{{ .Release.Name }}-loki.{{ .Release.Namespace }}.svc.cluster.local:3100"
    TEMPO_URL: "http://{{ .Release.Name }}-tempo.{{ .Release.Namespace }}.svc.cluster.local:3100"

  persistence:
    enabled: true
    size: 1Gi

  sidecar:
    dashboards:
      enabled: false
      labelValue: "1"
      searchNamespace: ALL
      resource: configmap
      folderAnnotation: grafana_dashboard_folder
      provider:
        foldersFromFilesStructure: true

    datasources:
      enabled: true
      labelValue: "1"
      searchNamespace: ALL
      resource: configmap

api:
  enabled: true

  deployment:
    replicas: 3
    image:
      repository: ghcr.io/abgeo/follytics-api
      tag: main
    ports:
      - containerPort: 8000
        name: http
        protocol: TCP
    securityContext:
      runAsUser: 1001
    env:
      DATABASE_HOST:
        value: "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
      DATABASE_USER:
        value: postgres
      DATABASE_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: "{{ .Release.Name }}-postgresql"
            key: postgres-password
      DATABASE_DATABASE:
        value: postgres
      TELEMETRY_ENABLED:
        value: "true"
      TELEMETRY_COLLECTOR_URL:
        value: "{{ .Release.Name }}-opentelemetry-collector:4317"
    livenessProbe:
      enabled: true
      httpGet:
        path: /healthz
        port: 8000
    readinessProbe:
      enabled: true
      httpGet:
        path: /healthz
        port: 8000
    initContainers:
      migrate:
        image: ghcr.io/abgeo/follytics-api:main
        command:
          - follytics
          - migrate
          - apply
        securityContext:
          runAsUser: 1001
        env:
          - name: DATABASE_HOST
            value: "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
          - name: DATABASE_USER
            value: postgres
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-postgresql"
                key: postgres-password
          - name: DATABASE_DATABASE
            value: postgres
          - name: TELEMETRY_ENABLED
            value: "true"
          - name: TELEMETRY_COLLECTOR_URL
            value: "{{ .Release.Name }}-opentelemetry-collector:4317"

  service:
    ports:
      - port: 8000
        name: http
        protocol: TCP
        targetPort: 8000

  ingress:
    enabled: true
    ingressClassName: ""
    hosts:
      - host: api.follytics.app
        paths:
          - path: /
            pathType: ImplementationSpecific
            serviceName: api
            servicePort: http

worker:
  enabled: true

  deployment:
    enabled: false

  service:
    enabled: false

  rbac:
    enabled: true
    serviceAccount:
      enabled: true

  secret:
    enabled: true
    files:
      github-app:
        data:
          client-id: ""
          installation-id: ""
        encodedData:
          private-key.pem: ""

  cronJob:
    enabled: true
    jobs:
      worker:
        schedule: "*/5 * * * *"
        image:
          repository: ghcr.io/abgeo/follytics-api
          tag: main
        command: [ "follytics" ]
        args: [ "worker" ]
        env:
          GITHUB_APP_CLIENT_ID:
            valueFrom:
              secretKeyRef:
                name: worker-github-app
                key: client-id
          GITHUB_APP_INSTALLATION_ID:
            valueFrom:
              secretKeyRef:
                name: worker-github-app
                key: installation-id
          GITHUB_APP_PRIVATE_KEY_PATH:
            value: /var/secret/github-app/private-key.pem
          DATABASE_HOST:
            value: "{{ .Release.Name }}-postgresql-primary.{{ .Release.Namespace }}.svc.cluster.local"
          DATABASE_USER:
            value: postgres
          DATABASE_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: "{{ .Release.Name }}-postgresql"
                key: postgres-password
          DATABASE_DATABASE:
            value: postgres
          TELEMETRY_ENABLED:
            value: "true"
          TELEMETRY_COLLECTOR_URL:
            value: "{{ .Release.Name }}-opentelemetry-collector:4317"
        volumes:
          - name: github-app
            secret:
              secretName: worker-github-app
        volumeMounts:
          - mountPath: "/var/secret/github-app"
            name: github-app
            readOnly: true

ui:
  enabled: true

  secret:
    enabled: true
    files:
      config:
        data:
          NEXT_PUBLIC_APP_URL: "https://follytics.app"
          NEXT_PUBLIC_API_URL: "https://api.follytics.app"
          AUTH_TRUST_HOST: "true"
          AUTH_URL: "https://follytics.app/"
          AUTH_SECRET: ""
          AUTH_GITHUB_ID: ""
          AUTH_GITHUB_SECRET: ""

  deployment:
    replicas: 3
    image:
      repository: ghcr.io/abgeo/follytics-ui
      tag: main
    ports:
      - containerPort: 3000
        name: http
        protocol: TCP
    securityContext:
      runAsUser: 1001
    env:
      OTEL_EXPORTER_OTLP_ENDPOINT:
        value: "http://{{ .Release.Name }}-opentelemetry-collector:4318"
    envFrom:
      config:
        type: secret
        nameSuffix: config
    livenessProbe:
      enabled: true
      httpGet:
        path: /
        port: 3000
    readinessProbe:
      enabled: true
      httpGet:
        path: /
        port: 3000
    containerSecurityContext:
      readOnlyRootFilesystem: false
      runAsNonRoot: true

  service:
    enabled: true
    ports:
      - port: 3000
        name: http
        protocol: TCP
        targetPort: 3000

  ingress:
    enabled: true
    ingressClassName: ""
    hosts:
      - host: follytics.app
        paths:
          - path: /
            pathType: ImplementationSpecific
            serviceName: ui
            servicePort: http
